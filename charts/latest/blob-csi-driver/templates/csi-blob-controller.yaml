kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Values.controller.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.controller.name }}
    {{- include "blob.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.controller.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.controller.name }}
      {{- include "blob.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ .Values.controller.name }}
        {{- include "blob.labels" . | nindent 8 }}
        {{- if .Values.workloadIdentity.clientID }}
        azure.workload.identity/use: "true"
        {{- end }}
        {{- if .Values.podLabels }}
{{- toYaml .Values.podLabels | nindent 8 }}
        {{- end }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      hostNetwork: {{ .Values.controller.hostNetwork }}
      serviceAccountName: {{ .Values.serviceAccount.controller }}
      nodeSelector:
        kubernetes.io/os: linux
    # runOnControlPlane=true or runOnMaster=true only takes effect if affinity is not set
    {{- if tpl "{{ .Values.controller.affinity }}" . | contains "nodeSelectorTerms" }}
      {{- with .Values.controller.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
    {{- else if or .Values.controller.runOnControlPlane .Values.controller.runOnMaster}}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                {{- if .Values.controller.runOnControlPlane}}
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
                {{- end}}
                {{- if .Values.controller.runOnMaster}}
                - key: node-role.kubernetes.io/master
                  operator: Exists
                {{- end}}
    {{- end }}
{{- with .Values.controller.nodeSelector }}
{{ toYaml . | indent 8 }}
{{- end }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      securityContext:
        seccompProfile:
          type: RuntimeDefault
{{- with .Values.controller.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
      containers:
        - name: csi-provisioner
{{- if hasPrefix "/" .Values.image.csiProvisioner.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.csiProvisioner.repository }}:{{ .Values.image.csiProvisioner.tag }}"
{{- else }}
          image: "{{ .Values.image.csiProvisioner.repository }}:{{ .Values.image.csiProvisioner.tag }}"
{{- end }}
          args:
            - "-v=2"
            - "--csi-address=$(ADDRESS)"
            - "--leader-election"
            - "--leader-election-namespace={{ .Release.Namespace }}"
            - "--timeout=1200s"
            - "--extra-create-metadata=true"
            - "--kube-api-qps=50"
            - "--kube-api-burst=100"
            - "--feature-gates=HonorPVReclaimPolicy=true"
            - "--retry-interval-max=30m"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          imagePullPolicy: {{ .Values.image.csiProvisioner.pullPolicy }}
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
          resources: {{- toYaml .Values.controller.resources.csiProvisioner | nindent 12 }}
          securityContext:
            capabilities:
              drop:
              - ALL
        - name: liveness-probe
{{- if hasPrefix "/" .Values.image.livenessProbe.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
{{- else }}
          image: "{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
{{- end }}
          args:
            - --csi-address=/csi/csi.sock
            - --probe-timeout=3s
{{- if eq .Values.controller.hostNetwork true }}
            - --http-endpoint=localhost:{{ .Values.controller.livenessProbe.healthPort }}
{{- else }}
            - --health-port={{ .Values.controller.livenessProbe.healthPort }}
{{- end }}
          imagePullPolicy: {{ .Values.image.livenessProbe.pullPolicy }}
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources: {{- toYaml .Values.controller.resources.livenessProbe | nindent 12 }}
          securityContext:
            capabilities:
              drop:
              - ALL
        - name: blob
{{- if hasPrefix "/" .Values.image.blob.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.blob.repository }}:{{ .Values.image.blob.tag }}"
{{- else }}
          image: "{{ .Values.image.blob.repository }}:{{ .Values.image.blob.tag }}"
{{- end }}
          args:
            - "--v={{ .Values.controller.logLevel }}"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--metrics-address=0.0.0.0:{{ .Values.controller.metricsPort }}"
            - "--drivername={{ .Values.driver.name }}"
            - "--custom-user-agent={{ .Values.driver.customUserAgent }}"
            - "--user-agent-suffix={{ .Values.driver.userAgentSuffix }}"
            - "--cloud-config-secret-name={{ .Values.controller.cloudConfigSecretName }}"
            - "--cloud-config-secret-namespace={{ .Values.controller.cloudConfigSecretNamespace }}"
            - "--allow-empty-cloud-config={{ .Values.controller.allowEmptyCloudConfig }}"
          ports:
            - containerPort: {{ .Values.controller.metricsPort }}
              name: metrics
              protocol: TCP
{{- if ne .Values.controller.hostNetwork true }}
            - containerPort: {{ .Values.controller.livenessProbe.healthPort }}
              name: healthz
              protocol: TCP
{{- end }}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
{{- if eq .Values.controller.hostNetwork true }}
              host: localhost
              port: {{ .Values.controller.livenessProbe.healthPort }}
{{- else }}
              port: healthz
{{- end }}
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 30
          env:
            - name: AZURE_CREDENTIAL_FILE
              valueFrom:
                configMapKeyRef:
                  name: azure-cred-file
                  key: path
                  optional: true
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            {{- if ne .Values.driver.httpsProxy "" }}
            - name: HTTPS_PROXY
              value: {{ .Values.driver.httpsProxy }}
            {{- end }}
            {{- if ne .Values.driver.httpProxy "" }}
            - name: HTTP_PROXY
              value: {{ .Values.driver.httpProxy }}
            {{- end }}
            - name: AZURE_GO_SDK_LOG_LEVEL
              value: {{ .Values.driver.azureGoSDKLogLevel }}
            {{- if eq .Values.cloud "AzureStackCloud" }}
            - name: AZURE_ENVIRONMENT_FILEPATH
              value: /etc/kubernetes/azurestackcloud.json
            {{- end }}
          imagePullPolicy: {{ .Values.image.blob.pullPolicy }}
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
            - mountPath: /root/.azcopy
              name: azcopy-dir
            - mountPath: /etc/kubernetes/
              name: azure-cred
            {{- if and (eq .Values.cloud "AzureStackCloud") (ne .Values.linux.distro "fedora") }}
            - name: ssl
              mountPath: /etc/ssl/certs
              readOnly: true
            {{- end }}
            {{- if eq .Values.linux.distro "fedora" }}
            - name: ssl
              mountPath: /etc/ssl/certs
              readOnly: true
            - name: ssl-pki
              mountPath: /etc/pki/ca-trust/extracted
              readOnly: true
            {{- end }}
          resources: {{- toYaml .Values.controller.resources.blob | nindent 12 }}
          securityContext:
            capabilities:
              drop:
              - ALL
        - name: csi-resizer
{{- if hasPrefix "/" .Values.image.csiResizer.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.csiResizer.repository }}:{{ .Values.image.csiResizer.tag }}"
{{- else }}
          image: "{{ .Values.image.csiResizer.repository }}:{{ .Values.image.csiResizer.tag }}"
{{- end }}
          args:
            - "-csi-address=$(ADDRESS)"
            - "-v=2"
            - "-leader-election"
            - "--leader-election-namespace={{ .Release.Namespace }}"
            - '-handle-volume-inuse-error=false'
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          imagePullPolicy: {{ .Values.image.csiResizer.pullPolicy }}
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources: {{- toYaml .Values.controller.resources.csiResizer | nindent 12 }}
          securityContext:
            capabilities:
              drop:
              - ALL
      volumes:
        - name: socket-dir
          emptyDir: {}
        - name: azcopy-dir
          emptyDir: {}
        - name: azure-cred
          hostPath:
            path: /etc/kubernetes/
            type: DirectoryOrCreate
        {{- if and (eq .Values.cloud "AzureStackCloud") (ne .Values.linux.distro "fedora") }}
        - name: ssl
          hostPath:
            path: /etc/ssl/certs
        {{- end }}
        {{- if eq .Values.linux.distro "fedora" }}
        - name: ssl
          hostPath:
            path: /etc/ssl/certs
        - name: ssl-pki
          hostPath:
            path: /etc/pki/ca-trust/extracted
        {{- end }}
      {{- if .Values.securityContext }}
      securityContext: {{- toYaml .Values.securityContext | nindent 8 }}
      {{- end }}
